openapi: 3.0.0
info:
  title: API for budget application
  description: OpenAPI schema of budget application
  version: 1.0.0
tags:
  - name: User Management
  - name: WalletController
  - name: Transactions
  - name: Categories
paths:
  /users/registration:
    post:
      summary: registration
      description: As a User I want to to have a registration functionality
      tags:
        - User Management
      operationId: registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginDto'
        description: DTO for User entity
        required: true
      responses:
        '201':
          description: Returns the HttpStatus 201 and id of the created user account and means the successful registration
          content:
            application/json:
              schema:
                type: integer
                format: int64
                example: 1
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security: [ ]

  /users/login:
    post:
      summary: LogIn
      description: As a User I want to to have a login functionality so that I can get an access to my User account
      tags:
        - User Management
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginDto'
        description: DTO for User entity
        required: true
      responses:
        '204':
          description: Successful authentication
          headers:
            Authorization:
              schema:
                type: string
                example: Bearer 123
              description: JWT Authorization header using the Bearer scheme
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security: []
  /users/logout:
    get:
      summary: User logout with JWT de-activation
      description: One user decides to exit the system, any authentication shall be de-activated
      tags:
        - User Management
      operationId: logout
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: JWT
          required: true
          description: JWT Authorization header using the Bearer scheme
      responses:
        '200':
          description: Successful logout
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /users:
    delete:
      summary: Delete User
      description: Method for deleting User. User entity is NOT deleted, only user data.
      tags:
        - User Management
      operationId: deleteUser
      responses:
        '204':
          description: Returns http status "No content" which means successful deletion of the user data
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /users/{userId}:
    get:
      summary: Get User by Id
      description: Method for getting a user by id. Returns the user's data
      tags:
        - User Management
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID is required to obtain User data
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns user by id that means successful receipt of data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /wallets:
    post:
      summary: Create new wallet
      description: To create a new wallet, a json object must be sent in the request.
      requestBody:
        description: To create a user, you need to send an object in json format. If the operation is successful, Http status 201 and id returned
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletRequestDto'
      tags:
        - WalletController
      operationId: createWallet
      responses:
        '201':
          description: Returns the HttpStatus 201 and id of the created wallet and means the successful creation of a new wallet
          content:
            application/json:
              schema:
                type: integer
                format: int64
                example: 1
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    get:
      summary: Get all wallets
      description: Returns an array of wallets owned by an authenticated user
      tags:
        - WalletController
      operationId: getAllWallets
      responses:
        '200':
          description: Returns a json object with an array of wallets that means successful receipt of data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WalletResponseDto'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /wallets/{walletId}:
    get:
      summary: Get wallet by Id
      description: Method for getting a wallet by id. Returns the user's wallet
      tags:
        - WalletController
      operationId: getWalletById
      parameters:
        - name: walletId
          in: path
          required: true
          description: To receive a wallet, you need to send the wallet id as a url parameter
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns wallet by id that means successful receipt of data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletResponseDto'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    put:
      summary: Update wallet by Id
      description: To update the wallet, you need to send a json object. Returns the updated user''s wallet
      tags:
        - WalletController
      operationId: updateWalletById
      parameters:
        - name: walletId
          in: path
          required: true
          description: To update wallet, you need to send the wallet id as a url parameter
          schema:
            type: integer
            format: int64
      requestBody:
        description: To update a user,  you need to send wallet object in json format with fields filled in (if the field was not updated, send the old data). If the operation is successful, Http status 200 and the id of the created wallet are returned
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletRequestDto'
      responses:
        '200':
          description: Returns updated wallet by id and current transactions it means successful data update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletResponseDto'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      summary: Delete by Id
      description: Method for deleting wallet by id. Returns HttpStatus 204 with no content
      tags:
        - WalletController
      operationId: deleteWalletById
      parameters:
        - name: walletId
          in: path
          required: true
          description: To delete a wallet, you need to send the wallet id as a url parameter
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Returns http status "No content" which means successful deletion of the wallet
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /transactions:
    get:
      summary: Get recent transactions for all or selected wallet
      description: Returns an array of recent transactions
      tags:
        - Transactions
      operationId: getTransactions
      parameters:
        - name: transactionsType
          schema:
            $ref: '#/components/schemas/TransactionTypeParameter'
          in: query
          description: On main page we have all type of transactions.
        - name: filterBy
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FilterParameter'
          in: query
          description: On main income page we haven't filter. If you need to select the desired option
        - name: sortBy
          schema:
            $ref: '#/components/schemas/SortParameter'
          in: query
          description: On main income page we have default sorting parametr.
          required: true
        - name: walletId
          schema:
            type: integer
            format: int64
            example: 25
          in: query
          description: if you not sent walletId you take transactions from all wallets, else only by number of wallet
        - name: page
          schema:
            type: integer
            format: int64
            example: 1
          in: query
          description: Number of page
          required: true
        - name: size
          schema:
            type: integer
            format: int64
            example: 10
          in: query
          description: Quantity of transactions, which will be show on 1 page
          required: true
      responses:
        '200':
          description: Returns a json object with an array of recent transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResponseDto'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    post:
      summary: Create transactions
      description: To create a new expense, a json object must be sent in the request.
      tags:
        - Transactions
      operationId: createTransaction
      requestBody:
        description: To create a transaction, you need to send an object in json format. If the operation is successful, Http status 201 and id returned
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequestDto'
      responses:
        '201':
          description: Returns the HttpStatus 201 and id of the created wallet and means the successful creation of a new wallet
          content:
            application/json:
              schema:
                type: integer
                format: int64
                example: 1
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /transactions/{transactionId}:
    get:
      summary: Get transaction by Id
      description: Method for getting a transaction by id. Returns income object
      tags:
        - Transactions
      operationId: getTransactionById
      parameters:
        - name: transactionId
          in: path
          required: true
          description: Receive a transaction, you need to send the transaction id as a url parameter
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns income by id that means successful receipt of data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponseDto'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    put:
      summary: Update transaction by Id
      description: To update the transaction, you need to send a json object. Returns the updated transaction
      tags:
        - Transactions
      operationId: updateTransactionById
      parameters:
        - name: transactionId
          in: path
          required: true
          description: To update income, you need to send the income id as a url parameter
          schema:
            type: integer
            format: int64
      requestBody:
        description: To update a income,  you need to send income object in json format with fields (if the field was not updated, send the old data). If the operation is successful, Http status 200 and updated income by id  are returned''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequestDto'
      responses:
        '200':
          description: Returns updated income by id and current transactions it means successful data update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponseDto'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      summary: Delete transaction by Id
      description: Method for deleting transaction by id. Returns HttpStatus 204 with no content
      tags:
        - Transactions
      operationId: deleteTtransactionById
      parameters:
        - name: transactionId
          in: path
          required: true
          description: To receive a transaction, you need to send the transaction id as a url parameter
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Returns http status "No content" which means successful deletion of the transaction
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /categories:
    get:
      summary: Get all categories
      description: Returns an array of categories owned by an authenticated user
      tags:
        - Categories
      operationId: getAllCategories
      parameters:
        - name: categoryType
          schema:
            $ref: '#/components/schemas/TransactionTypeParameter'
          in: query
          description: On main page we have all type of transactions.
      responses:
        '200':
          description: Returns a json object with an array of categories that means successful receipt of data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryResponseDto'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    post:
      summary: Create category
      description: To create the category, you need to send a json object
      tags:
        - Categories
      operationId: createCategory
      requestBody:
        description: To create a category, you need to send category object in json format with fields filled in. If the operation is successful, Http status 200
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequestDto'
      responses:
        '201':
          description: Returns the HttpStatus 201 and id of the created category and means the successful creation of a new category
          content:
            application/json:
              schema:
                type: integer
                format: int64
                example: 1
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /categories/{categoryId}:
    get:
      summary: Get category by Id
      description: Method for getting a category by id.
      tags:
        - Categories
      operationId: getCategoryById
      parameters:
        - name: categoryId
          in: path
          required: true
          description: To receive a category, you need to send the category id as a url parameter
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns category by id that means successful receipt of data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponseDto'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    put:
      summary: Update category by Id
      description: To update the category, you need to send a json object. Returns the updated user's category
      tags:
        - Categories
      operationId: updateCategoryById
      parameters:
        - name: categoryId
          in: path
          required: true
          description: To update category, you need to send the category id as a url parameter
          schema:
            type: integer
            format: int64
      requestBody:
        description: To update a category, you need to send category object in json format with fields filled in (if the field was not updated, send the old data). If the operation is successful, Http status 200
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequestDto'
      responses:
        '200':
          description: Returns updated category by id it means successful data update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponseDto'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      summary: Delete category by Id
      description: Method for deleting category by id. Returns HttpStatus 204 with no content
      tags:
        - Categories
      operationId: deleteCategoryById
      parameters:
        - name: categoryId
          in: path
          required: true
          description: To delete a category, you need to send the category id as a url parameter
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Returns http status "No content" which means successful deletion of the category
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
components:
  responses:
    Error:
      description: generic error return body template
      content:
        application/json:
          schema:
            type: string
            example: User not authenticated
  schemas:
    UserLoginDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
      x-examples:
        example-1:
          username: user@exadel.com
          password: User1234
    UserResponseDto:
      type: object
      properties:
        username:
          type: string
      x-examples:
        example-1:
          username: user@exadel.com
    WalletRequestDto:
      type: object
      required:
        - name
        - isDefault
        - currency
      properties:
        name:
          type: string
          example: USD wallet
        isDefault:
          type: boolean
          example: false
        currency:
          type: string
          example: USD
    WalletResponseDto:
      type: object
      required:
        - id
        - name
        - isDefault
        - currency
        - balance
      properties:
        id:
          type: integer
          format: int64
          example: 4
        name:
          type: string
          example: My USD card
        isDefault:
          type: boolean
          example: false
        currency:
          type: string
          example: USD
        balance:
          type: string
          example: '3000,00'
    TransactionResponseDto:
      description: This is  Transaction object
      type: object
      required:
        - id
        - transactionType
        - date
        - category
        - amount
        - currency
        - walletName
      properties:
        id:
          description: Transaction's ID
          type: integer
          example: 25
        transactionType:
          $ref: '#/components/schemas/TransactionTypeParameter'
        date:
          description: Transaction's data in "yyyy-MM-dd" format
          type: string
          example: '2019-09-25'
        category:
          $ref: '#/components/schemas/CategoryResponseDto'
        subcategory:
          description: Need only for expense transactions
          type: string
          example: Gift
        amount:
          description: Income amount.
          type: string
          example: '200'
        currency:
          description: Transaction's currency
          type: string
          example: USD
        walletName:
          description: The wallet in which the transaction is located
          type: string
          example: Salary
        payer:
          description: Paied person
          type: string
          example: Wife
        notes:
          description: Something about this incomes
          type: string
          example: Something about this transaction
    TransactionRequestDto:
      description: This is  Transaction object
      type: object
      required:
        - transactionType
        - date
        - category
        - amount
        - walletId
      properties:
        transactionType:
          $ref: '#/components/schemas/TransactionTypeParameter'
        date:
          description: Transaction's data in "yyyy-MM-dd" format
          type: string
          example: '2019-09-03'
        category:
          $ref: '#/components/schemas/CategoryResponseDto'
        subcategory:
          description: Need only for expense transactions
          type: string
          example: Milk
        amount:
          description: Income amount.
          type: string
          example: '200'
        walletId:
          type: integer
          format: int64
          example: 1
        payer:
          description: Paied person
          type: string
          example: Wife
        notes:
          description: Something about this incomes
          type: string
          example: Something about this transaction
    CategoryRequestDto:
      description: Category of transactions
      type: object
      required:
        - name
        - color
        - categoryType
      properties:
        name:
          type: string
          example: Food
        color:
          type: string
          maxLength: 7
          example: '#FF0000'
        categoryType:
          $ref: '#/components/schemas/TransactionTypeParameter'
    CategoryResponseDto:
      description: Category of transactions
      type: object
      required:
        - id
        - name
        - color
        - categoryType
      properties:
        id:
          type: integer
          format: int64
          example: 4
        name:
          type: string
          example: Food
        color:
          type: string
          maxLength: 7
          example: '#FF0000'
        categoryType:
          $ref: '#/components/schemas/TransactionTypeParameter'
    SortParameter:
      description: This is  parameter for sort data
      enum:
        - DATEDESC
        - DATEASC
        - AMOUNTDESC
        - AMOUNTASC
      default: DATEDESC
    FilterParameter:
      description: This is  parameter for filter data
      enum:
        - WALLET
        - DATE
        - CATEGORY
        - PAYER
    TransactionTypeParameter:
      description: This parameter show kind of transactions you need
      enum:
        - INCOME
        - EXPENSE
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: JWT Authorization header using the Bearer scheme
security:
  - bearerAuth: []