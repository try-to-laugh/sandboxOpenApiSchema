openapi: 3.0.0
info:
  title: API for Exadel budget application
  description: OpenAPI schema of budget application
  version: 1.0.0
tags:
  - name: User Management
paths:
  /users/login:
    post:
      summary: LogIn
      tags:
        - User Management
      operationId: login
      responses:
        '200':
          description: OK
          headers:
            Authorization:
              schema:
                type: string
              description: JWT Authorization header using the Bearer scheme
        '401':
          description: Invalid Email or Password
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: template for error reporting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginDto'
      description: As a User I want to to have a login functionality so that I can get an access to my User account
      security: [ ]

  /wallets:
    
    post:
      summary: Create new wallet
      requestBody:
        description: To create a user, you need to send an object in json format. If the operation is successful, Http status 204 returned
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/walletReqDto'
      tags: 
        - WalletControler
      operationId: saveWalet
      responses:
        '204':
          description: Returns the HttpStatus 204 with no content that means successful creation of a new wallet
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"             
    get:
      summary: Returns an array of wallets as well as the recent 10 transactions 
                owned by an authenticated user 
      tags: 
        - WalletControler
      operationId: getAllWallets
      responses:
        '200':
          description: Returns a json object with an array of wallets and recent transactions that means successful receipt of data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/walletsDto"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        

  /wallets/{walletId}:
    get:
      summary: Method for getting a wallet by id. Returns the user's wallet and recent transactions
      tags: 
        - WalletControler
      operationId: getWalletById
      parameters: 
        - name: walletId
          in: path
          required: true
          description: To receive a wallet, you need to send the wallet id as a url parameter
          schema:
            type: integer
      responses:
        '200':
          description: Returns wallet by id and current transactions 
                      that means successful receipt of data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/walletRespDto"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error" 
    put:
      summary: Method for updating wallet data by id. Returns the updated user's wallet and recent transactions
      tags: 
        - WalletControler
      operationId: updateWalletById
      parameters: 
        - name: walletId
          in: path
          required: true
          description: To update wallet, you need to send the wallet id as a url parameter
          schema:
            type: integer
      requestBody:
        description: To update a user,  you need to send wallet object in json format with fields filled in (if the field was not updated, send the old data). If the operation is successful, Http status 201 and the id of the created wallet are returned
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/walletReqDto'
      responses:
        '200':
          description: Returns updated wallet by id and current transactions 
                      it means successful data update
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/walletRespDto"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"             
    
    delete:
      summary: Method for deliting wallet by id. Returns HttpStatus 204 with no content
      tags: 
        - WalletControler
      operationId: deleteWalletById
      parameters: 
        - name: walletId
          in: path
          required: true
          description: To receive a wallet, you need to send the wallet id as a url parameter
          schema:
            type: integer
      responses:
        '204':
          description: Returns http status "No content" which means successful deletion of the wallet
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"    


components:
  schemas:
    UserLoginDto:
      type: object
      x-examples:
        example-1:
          username: user@exadel.com
          password: User
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      required:
        - code
        - message
      x-examples:
        example-1:
          code: 404
          message: Not found
    walletReqDto:
      type: object
      required: 
        - name
        - isDefault
        - currency
      properties:  
        name:
          type: string
          example: 'USD wallet'
        isDefault:
          type: boolean
          example: false
        currency:
          type: string
          example: 'USD'
          
    walletRespDto:      
      type: object
      required:
        - id
        - name
        - isDefault
        - currency
        - balance
        - transactions
      properties:
        id:
          type: integer
          format: int64
          example: 4
        name:
          type: string
          example: 'My USD card'
        isDefault:
          type: boolean
          example: false
        currency:
          type: string
          example: 'USD'
        balance:
          type: number
          format: double
          example: 3000,00
        resentTransactions:  
          type: array
          items:
            $ref: "#/components/schemas/transaction"
            
    simpleWalletRespDto:      
      type: object
      required:
        - id
        - name
        - isDefault
        - currency
        - balance
        - transactions
      properties:
        id:
          type: integer
          format: int64
          example: 4
        name:
          type: string
          example: 'My USD card'
        isDefault:
          type: boolean
          example: false
        currency:
          type: string
          example: 'USD'
        balance:
          type: number
          format: double
          example: 3000,00
          
    walletsDto:
      type: object
      required:
      - wallets
      - resentTransactions
      properties:
        wallets:
          type: array
          items:
            $ref: "#/components/schemas/simpleWalletRespDto"
        resentTransactions:  
          type: array
          items:
            $ref: "#/components/schemas/transaction"
    
        
    transaction:
      type: object
      required: 
        - id
        - category
        - transactionType
        - amount
        - date
        - walletId
      properties:
        id:
          type: integer
          format: int64
          example: 112
        category:
            $ref: "#/components/schemas/category"
        transactionType:
          type: string
          example: 'EXPENCE'
        amount :
          type: number
          format: double
          example: 30,00
        date:
          type: string
          format: date
          example: '2022-17-07'
        walletId:
            $ref: "#/components/schemas/simpleWalletRespDto"
          
    
    category:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 112
        name:
          type: string
          example: 'Petrol'
        parentCategory:
            $ref: "#/components/schemas/category"
            example: "object with parent categoy"
  
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: JWT Authorization header using the Bearer scheme
  


security:
  - bearerAuth: []
